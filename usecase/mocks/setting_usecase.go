// Code generated by MockGen. DO NOT EDIT.
// Source: ./setting_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "github/kunhou/simple-backend/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISettingRepository is a mock of ISettingRepository interface.
type MockISettingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISettingRepositoryMockRecorder
}

// MockISettingRepositoryMockRecorder is the mock recorder for MockISettingRepository.
type MockISettingRepositoryMockRecorder struct {
	mock *MockISettingRepository
}

// NewMockISettingRepository creates a new mock instance.
func NewMockISettingRepository(ctrl *gomock.Controller) *MockISettingRepository {
	mock := &MockISettingRepository{ctrl: ctrl}
	mock.recorder = &MockISettingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISettingRepository) EXPECT() *MockISettingRepositoryMockRecorder {
	return m.recorder
}

// CreateSetting mocks base method.
func (m *MockISettingRepository) CreateSetting(ctx context.Context, setting *entity.Setting) (*entity.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSetting", ctx, setting)
	ret0, _ := ret[0].(*entity.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSetting indicates an expected call of CreateSetting.
func (mr *MockISettingRepositoryMockRecorder) CreateSetting(ctx, setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSetting", reflect.TypeOf((*MockISettingRepository)(nil).CreateSetting), ctx, setting)
}

// DeleteSetting mocks base method.
func (m *MockISettingRepository) DeleteSetting(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSetting", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSetting indicates an expected call of DeleteSetting.
func (mr *MockISettingRepositoryMockRecorder) DeleteSetting(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSetting", reflect.TypeOf((*MockISettingRepository)(nil).DeleteSetting), ctx, id)
}

// DeleteSettingByName mocks base method.
func (m *MockISettingRepository) DeleteSettingByName(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSettingByName", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSettingByName indicates an expected call of DeleteSettingByName.
func (mr *MockISettingRepositoryMockRecorder) DeleteSettingByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSettingByName", reflect.TypeOf((*MockISettingRepository)(nil).DeleteSettingByName), ctx, name)
}

// GetSettingByName mocks base method.
func (m *MockISettingRepository) GetSettingByName(ctx context.Context, name string) (*entity.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingByName", ctx, name)
	ret0, _ := ret[0].(*entity.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingByName indicates an expected call of GetSettingByName.
func (mr *MockISettingRepositoryMockRecorder) GetSettingByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingByName", reflect.TypeOf((*MockISettingRepository)(nil).GetSettingByName), ctx, name)
}

// GetSettings mocks base method.
func (m *MockISettingRepository) GetSettings(ctx context.Context) ([]*entity.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettings", ctx)
	ret0, _ := ret[0].([]*entity.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockISettingRepositoryMockRecorder) GetSettings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockISettingRepository)(nil).GetSettings), ctx)
}

// UpdateSetting mocks base method.
func (m *MockISettingRepository) UpdateSetting(ctx context.Context, id uint, setting *entity.Setting) (*entity.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSetting", ctx, id, setting)
	ret0, _ := ret[0].(*entity.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSetting indicates an expected call of UpdateSetting.
func (mr *MockISettingRepositoryMockRecorder) UpdateSetting(ctx, id, setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSetting", reflect.TypeOf((*MockISettingRepository)(nil).UpdateSetting), ctx, id, setting)
}

// UpdateSettingByName mocks base method.
func (m *MockISettingRepository) UpdateSettingByName(ctx context.Context, name string, setting *entity.Setting) (*entity.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSettingByName", ctx, name, setting)
	ret0, _ := ret[0].(*entity.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSettingByName indicates an expected call of UpdateSettingByName.
func (mr *MockISettingRepositoryMockRecorder) UpdateSettingByName(ctx, name, setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettingByName", reflect.TypeOf((*MockISettingRepository)(nil).UpdateSettingByName), ctx, name, setting)
}
